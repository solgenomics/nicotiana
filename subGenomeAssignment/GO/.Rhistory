## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
install.packages("RSQLite")
library("DESeq2")
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment)
ddsHTSeq
colData=data.frame(time=factor(time),treatment=factor(treatment))
colData
model.matrix(~time+treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c(0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1)
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = factor(treatment))
colData=data.frame(time=time,treatment=factor(treatment))
model.matrix(~time+treatment+time:treatment,colData)
View(wt_aggregate)
View(clv1ab_cyto_treatment_aggregate)
A=seq(-10,10,0.01)
A
e
Y=1/(1+exp(-X))
Y=1/(1+exp(-A))
plot(A,Y)
?rbern
rnorm
rnormal
?rnorm
?hist
N = 10000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-10,1)+R*rnorm(N,10,1)
hist(Y)
library(WGCNA)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
NtabData = read.csv("rlog.count.csv")
# each row is the gene expression data (rlog transformed) of all genes in each condition
NtabExpr = as.data.frame(t(NtabData[,-1]))
names(NtabExpr) = NtabData$X
rownames(NtabExpr) = colnames(NtabData[,-1])
bwnet = blockwiseModules(NtabExpr, power = 12,maxBlockSize=16000,
TOMType = "unsigned", minModuleSize = 20,
reassignThreshold = 0, mergeCutHeight = 0.25,
numericLabels = TRUE, pamRespectsDendro = FALSE,
saveTOMs = TRUE,
saveTOMFileBase = "Ntab-blockwise",
verbose = 3)
save(bwnet,"Ntab.network.RData")
save(bwnet,file = "Ntab.network.RData")
bwnet$colors
table(bwneet$colors)
table(bwnet$colors)
bwmoduleLabels = bwnet$colors
bwmoduleColors = labels2colors(bwnet$colors)
bwMEs = bwnet$MEs
save(bwnet, bwmoduleLabels, bwmoduleColors, bwMEs, file="Ntab.network.RData")
# plotting
# open a graphics window
sizeGrWindow(12,12)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 2
plotDendroAndColors(bwnet$dendrograms[[2]], bwModuleColors[bwnet$blockGenes[[2]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 3
plotDendroAndColors(bwnet$dendrograms[[3]], bwModuleColors[bwnet$blockGenes[[3]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
bwModuleLabels = bwnet$colors
bwModuleColors = labels2colors(bwnet$colors)
bwMEs = bwnet$MEs
save(bwnet, bwModuleLabels, bwModuleColors, bwMEs, file="Ntab.network.RData")
# plotting
# open a graphics window
sizeGrWindow(12,12)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 2
plotDendroAndColors(bwnet$dendrograms[[2]], bwModuleColors[bwnet$blockGenes[[2]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 3
plotDendroAndColors(bwnet$dendrograms[[3]], bwModuleColors[bwnet$blockGenes[[3]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# plotting
# open a graphics window
sizeGrWindow(12,12)
# Plot the dendrogram and the module colors underneath for block 1
plotDendroAndColors(bwnet$dendrograms[[1]], bwModuleColors[bwnet$blockGenes[[1]]],
"Module colors", main = "Gene dendrogram and module colors in block 1",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 2
plotDendroAndColors(bwnet$dendrograms[[2]], bwModuleColors[bwnet$blockGenes[[2]]],
"Module colors", main = "Gene dendrogram and module colors in block 2",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
# Plot the dendrogram and the module colors underneath for block 3
plotDendroAndColors(bwnet$dendrograms[[3]], bwModuleColors[bwnet$blockGenes[[3]]],
"Module colors", main = "Gene dendrogram and module colors in block 3",
dendroLabels = FALSE, hang = 0.03,
addGuide = TRUE, guideHang = 0.05)
bwnet$colors[[1]]
bwnet$colors[[2]]
bwnet$colors[[44000]]
length(bwnet$colors)
bwModuleLabels = bwnet$colors
bwModuleColors = labels2colors(bwnet$colors)
bwMEs = bwnet$MEs
geneTree1 = bwnet$dendrograms[[1]]
geneTree2 = bwnet$dendrograms[[2]]
geneTree3 = bwnet$dendrograms[[3]]
save(bwnet, bwModuleLabels, bwModuleColors, bwMEs,
geneTree1, geneTree2, geneTree3, file="Ntab.network.RData")
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="Ntab.network.RData")
lnames
save(NtabExpr, bwnet, bwModuleLabels, bwModuleColors, bwMEs,
geneTree1, geneTree2, geneTree3, file="Ntab.network.RData")
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="Ntab.network.RData")
lnames
nGenes = ncol(NtabExpr)
nSamples = nrow(NtabExpr)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(datExpr, moduleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2),
cex.lab = 0.8, xLabelsAngle= 90)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(NtabExpr, moduleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MET, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2),
cex.lab = 0.8, xLabelsAngle= 90)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(NtabExpr, moduleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2),
cex.lab = 0.8, xLabelsAngle= 90)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(NtabExpr, bwModuleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "", marDendro = c(0,4,1,2), marHeatmap = c(3,4,1,2),
cex.lab = 0.8, xLabelsAngle= 90)
MEs = moduleEigengenes(NtabExpr, bwModuleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene Dendeogram", marDendro = c(0,4,1,2),
plotHeatmaps = FALSE)
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene heatmap", marHeatmap=c(3,4,2,2),
plotDendrograms = FALSE, xLabelsAngle=90)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(NtabExpr, bwModuleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene Dendeogram", marDendro = c(0,4,1,2),
plotHeatmaps = FALSE)
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene heatmap", marHeatmap=c(3,4,2,2),
plotDendrograms = FALSE, xLabelsAngle=90)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="Ntab.network.RData")
nGenes = ncol(NtabExpr)
nSamples = nrow(NtabExpr)
# explore the similarities between module eigengenes
# Recalculate module eigengenes
MEs = moduleEigengenes(NtabExpr, bwModuleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene Dendeogram", marDendro = c(0,4,1,2),
plotHeatmaps = FALSE)
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene heatmap", marHeatmap=c(3,4,2,2),
plotDendrograms = FALSE, xLabelsAngle=90)
lnames
bwModuleColors
bwModuleLabels
bwnet$blocks
MEs = moduleEigengenes(NtabExpr, bwModuleColors)$eigengenes
# Plot the relationships among the eigengenes and the trait
sizeGrWindow(5,7.5);
par(cex = 0.9)
plotEigengeneNetworks(MEs, "Eigengene Dendeogram", marDendro = c(0,4,1,2),
plotHeatmaps = FALSE)
MEs
bwnet$colors
lnames
bwModuleColors
set(bwModuleColors)
library(math)
unique(bwModuleColors)
table(bwnet$colors)
# get the number of nodes in each module
color.set = unique(bwModuleColors)
for (color in color.set){
count = sum(bwModuleColors==color)
print(count)
}
head(bwnet$colors)
a="string"
a[1:]
a=list()
a
a.append(1)
a=c(a,1)
a
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="Ntab.network.RData")
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readlines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("gene.Nsyl.v1.ID")
Ntom.list = Glist("gene.Ntom.v1.ID")
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readLines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("gene.Nsyl.v1.ID")
Ntom.list = Glist("gene.Ntom.v1.ID")
length(Nsyl.list)
length(Ntom.list)
head(Nsyl.list)
color.set
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
rownames = list()
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
data
type(color.set)
Nsyl.list = Glist("gene.Nsyl.v1.ID")
color.set = list(unique(bwModuleColors))
colnames = c("total","S subgenome","T subgenome", "ambiguous")
rownames = list()
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
type(color.set)
1:length(color.set)
1:#
quit
1:3
lnames
bwModuleLabels
type(bwModuleLabels)
type(bwModuleColors)
lnames
head(bwnet$colors)
head(bwnet$colors[[1]])
head(bwnet$blocks)
head(bwnet$colors)
head(bwnet$blocks,29)
bwnet
bwnet$colors==1
NtabExpr[1:5,1]
head(rownames(NtabExpr))
head(colnames(NtabExpr))
head(colnames(NtabExpr[,1:10]))
head(colnames(NtabExpr[,5:10]))
head(colnames(NtabExpr[,bwnet$colors==1]))
matchLabels(bwnet$colors,bwModuleLabels)
?matchLabels
lnames
head(bwModuleColors)
head(bwModuleColors[[1]])
head(bwModuleColors[[c(1,2,3)]])
table(bwModuleColors)
table(bwModuleColors)['yellow']
table(bwModuleColors)[['yellow']]
?table
color.set
for (color.index in 0:(length(color.set)-1)){
count = sum(bwnet$colors == color.index)
gene.subset = colnames(NtabExpr[,bwnet$colors==color.index])
Nsyl.count = sum(Nsyl.list %in% gene.subset)
Ntom.count = sum(Ntom.list %in% gene.subsest)
other.count = count - Nsyl.count - Ntom.count
data[i,] = c(count,Nsyl.count,Ntom.count,other.count)
}
for (color.index in 0:(length(color.set)-1)){
count = sum(bwnet$colors == color.index)
gene.subset = colnames(NtabExpr[,bwnet$colors==color.index])
Nsyl.count = sum(Nsyl.list %in% gene.subset)
Ntom.count = sum(Ntom.list %in% gene.subset)
other.count = count - Nsyl.count - Ntom.count
data[i,] = c(count,Nsyl.count,Ntom.count,other.count)
}
for (color.index in 0:(length(color.set)-1)){
count = sum(bwnet$colors == color.index)
gene.subset = colnames(NtabExpr[,bwnet$colors==color.index])
Nsyl.count = sum(Nsyl.list %in% gene.subset)
Ntom.count = sum(Ntom.list %in% gene.subset)
other.count = count - Nsyl.count - Ntom.count
data[color.index+1,] = c(count,Nsyl.count,Ntom.count,other.count)
}
data
dim(data)
Nsyl.list = Glist("gene.Nsyl.v1.ID")
Ntom.list = Glist("gene.Ntom.v1.ID")
color.set = list(unique(bwModuleColors))
colnames = c("total","S subgenome","T subgenome", "ambiguous")
rownames = list()
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
data
color.set
length(color.set)
length(unique(bwModuleColors))
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
rownames = list()
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
# get the number of nodes in each module
for (color.index in 0:(length(color.set)-1)){
count = sum(bwnet$colors == color.index)
gene.subset = colnames(NtabExpr[,bwnet$colors==color.index])
Nsyl.count = sum(Nsyl.list %in% gene.subset)
Ntom.count = sum(Ntom.list %in% gene.subset)
other.count = count - Nsyl.count - Ntom.count
data[color.index+1,] = c(count,Nsyl.count,Ntom.count,other.count)
}
data
df = as.data.frame(data, row.names=1:length(color.set),col.names=colnames)
df
colnames
?as.data.frame
colnames = c("total","S subgenome","T subgenome", "ambiguous")
df = as.data.frame(data, row.names=1:length(color.set),col.names = colnames)
df
df = as.data.frame(data, row.names=1:length(color.set),col.names = c("total","S subgenome",
"T subgenome","ambiguous"))
df
colnames(df) = c("total","S subgenome","T subgenome","ambiguous")
df
write.csv(df,"WGCNA_summaryBySubgenome.csv")
table(bwModuleColors)
head(bwModuleColors)
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.res, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/network',color,'.csv'))
}
go.result
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/network',color,'.csv'))
}
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/GO.network',color,'.csv',sep=""))
}
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/GO.network.',color,'.csv',sep=""))
}
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/GO.network.',color,'.csv',sep=""))
}
table(bwModuleColors)
table(bwnet$colors)
