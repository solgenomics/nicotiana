nbinom?
q
?nbinom
dnegbinom
?dnegbinom
?dnbinom
?optim
?dnbinom
?optim
?optim
?sample
library(topGO)
> if (!requireNamespace("BiocManager", quietly=TRUE)) + install.packages("BiocManager") > BiocManager::install("topGO")
requireNameSpace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager")
BiocManager::install("topGO")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
library(ALL)
install.packages(ALL)
BiocManager::install("ALL")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
?paste
geneList
annotation(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
BiocManager::install("hgu95av2.db")
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher = runTest(sampleGOdata, algorithm='classic', statistic='fisher')
resultFisher
resultKS = runTest(sampleGOdata, algorihtm='classic', statistic='ks')
resultKS.elim = runTest(sampleGOdata, algorithm='elim', statistic='ks')
library(genefilter)
BiocManager::install("genefilter")
ALL
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
head(geneID2GO)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
sampleTable
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
library("DESeq2")
install.packages("Rcpp")
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
install.packages("RSQLite")
library("DESeq2")
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment)
ddsHTSeq
colData=data.frame(time=factor(time),treatment=factor(treatment))
colData
model.matrix(~time+treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c(0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1)
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = factor(treatment))
colData=data.frame(time=time,treatment=factor(treatment))
model.matrix(~time+treatment+time:treatment,colData)
View(wt_aggregate)
View(clv1ab_cyto_treatment_aggregate)
A=seq(-10,10,0.01)
A
e
Y=1/(1+exp(-X))
Y=1/(1+exp(-A))
plot(A,Y)
?rbern
rnorm
rnormal
?rnorm
?hist
N = 10000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-10,1)+R*rnorm(N,10,1)
hist(Y)
getwd()
library(ggplot2)
library(ggplot2)
df = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
23.2, 27.4, 49.4,
23.2, 30.9, 45.9)
)
df
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip()
library(ggplot2)
df_root = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
23.2, 27.4, 49.4,
23.2, 30.9, 45.9)
)
df_leaf = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(44.8, 29.1, 26.2,
18.1, 31.4, 50.5,
24.8, 25.2, 50.0)
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip()
p_root
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip() + blank_theme
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip() + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()+blank_theme
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.root.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
p_root
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
p_leaf <- ggplot(df_leaf, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
p_leaf
pnbinom(250,50,32/63,lower.tail=F)
pnbinom(300,50,32/63,lower.tail=F)
?pnorm
pnorm(5, mean=5,sd=1)
pnorm(5)
pnorm(300,mean=98.4375,sd=sqrt(82.764),lower.tail=F)
library(ggplot2)
df_root = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
23.2, 27.4, 49.4,
23.2, 30.9, 45.9)
)
df_root$module = factor(df_root$module,
levels=c("divergent module","similar module","same module"))
df_root_08 = data.frame(
gene = rep(c('unbiased(4367)','S-biased(1115)','T-biased(967)'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
26.2, 30, 43.8,
29.5, 29.4, 41.1)
)
df_root_08$module = factor(df_root_08$module,
levels=c("divergent module","similar module","same module"))
df_leaf = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(44.8, 29.1, 26.2,
18.1, 31.4, 50.5,
24.8, 25.2, 50.0)
)
df_leaf$module = factor(df_leaf$module,
levels=c("divergent module","similar module","same module"))
df_leaf_08 = data.frame(
gene = rep(c('unbiased(4225)','S-biased(987)','T-biased(866)'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(44.8, 29.1, 26.2,
23.6, 28.6, 47.8,
25.6, 29.3, 45.1)
)
df_leaf_08$module = factor(df_leaf_08$module,
levels=c("divergent module","similar module","same module"))
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_leaf <- ggplot(df_leaf, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_leaf_08 <- ggplot(df_leaf_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_root_08 <- ggplot(df_root_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
ggsave("homeologous gene in co-expression network.root.png",plot=p_root,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
ggsave("homeologous gene in co-expression network.root.80%%.png",plot=p_root_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
p_leaf_08 <- ggplot(df_leaf_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()+theme(aspect.ratio=2)
p_leaf_08 <- ggplot(df_leaf_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()+theme(aspect.ratio=2)
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4',
width=7,height=4)
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4',
width=4,height=7)
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
ggsave("homeologous gene in co-expression network.root.png",plot=p_root,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
ggsave("homeologous gene in co-expression network.root.80%%.png",plot=p_root_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
### Read a file that contains a list of gene pairs of interest,
### and return a R list object of these genes of interest
### This function is specifically written for the output of HEB test.
goFromCSV = function(csv, ncol, fdr){
csv.file = read.csv(file=csv, sep=",", header=TRUE)
#print(colnames(csv.file))
glist = csv.file[which(csv.file$q_value <= fdr),][,ncol]
return (go(glist))
}
goFromFile = function(Infile, col){
gene.list = list()
con = file(Infile, "r")
while(TRUE){
line = readLines(con, n=1)
if (length(line) == 0){
break
}
gene.list = c(gene.list, strsplit(trimws(line),"\t")[[1]][col])
}
close(con)
return (go(gene.list))
}
### Given a list of genes, return the result of GO Enrichment Analysis.
go = function(gList, AHRD=TRUE){
#print(gList)
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO = readMappings(file="gene2go.ahrd")
if (!AHRD){
geneID2GO = readMappings(file = "Ntab.gene2go.interproscan")
}
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 40)
return (allRes)
}
setwd("C:\Users\10453\source\repos\SGN\nicotiana\subGenomeAssignment\WGCNA")
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.S = goFromFile('80%.S-biased.txt',1)
r.S
r.T = goFromFile('80%.T-biased.txt',2)
r.T = goFromFile('80%.T-biased.txt',2)
wd
wd()
getwd()
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.T = goFromFile('80%.T-biased.txt',2)
r.T
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.unbiased.Nsyl = goFromFile('non.sig.txt',1)
r.unbiased.Nsyl
r.T
r.unbiased.Nsyl
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.unbiased.Ntom = goFromFile('non.sig.txt',2)
r.unbiased.Ntom
goFromFileBothColumn = function(Infile){
gene.list = list()
con = file(Infile, "r")
while(TRUE){
line = readLines(con, n=1)
if (length(line) == 0){
break
}
gene.list = c(gene.list, strsplit(trimws(line),"\t")[[1]])
}
close(con)
return (go(gene.list))
}
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.unbiased = goFromFile('non.sig.txt')
r.unbiased = goFromFileBothColumn('non.sig.txt')
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
r.unbiased = goFromFileBothColumn('non.sig.txt')
r.unbiased
