res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
qqnorm(res)
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 500
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 500
n = 300
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
# the following code block estimates the variance of a negative binomial distribution
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = ((Z-mu)^2)
}
mean(var)
warnings()
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
q()
# Installing bioconductor
source("http://bioconductor.org/biocLite.R")
biocLite()
#Installing ggplot2
install.packages("ggplot2" , "reshape2")
library(ggplot2)
A=matrix(c(0,0,0,-1,0,0,0,-1,-1,1,0,-1,-1,1,0,-1),4,4,byrow=TRUE)
A
A%*%A
A%*%A%*%A
A%*%A%*%A%*%A
TRUE
sprintf('I love %s','hza')
?read.table
?optim
nbinom?
q
?nbinom
dnegbinom
?dnegbinom
?dnbinom
?optim
?dnbinom
?optim
?optim
?sample
library(topGO)
> if (!requireNamespace("BiocManager", quietly=TRUE)) + install.packages("BiocManager") > BiocManager::install("topGO")
requireNameSpace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager")
BiocManager::install("topGO")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
library(ALL)
install.packages(ALL)
BiocManager::install("ALL")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
?paste
geneList
annotation(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
BiocManager::install("hgu95av2.db")
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher = runTest(sampleGOdata, algorithm='classic', statistic='fisher')
resultFisher
resultKS = runTest(sampleGOdata, algorihtm='classic', statistic='ks')
resultKS.elim = runTest(sampleGOdata, algorithm='elim', statistic='ks')
library(genefilter)
BiocManager::install("genefilter")
ALL
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
head(geneID2GO)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
sampleTable
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
library("DESeq2")
install.packages("Rcpp")
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
install.packages("RSQLite")
library("DESeq2")
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment)
ddsHTSeq
colData=data.frame(time=factor(time),treatment=factor(treatment))
colData
model.matrix(~time+treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c(0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1)
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = factor(treatment))
colData=data.frame(time=time,treatment=factor(treatment))
model.matrix(~time+treatment+time:treatment,colData)
View(wt_aggregate)
View(clv1ab_cyto_treatment_aggregate)
A=seq(-10,10,0.01)
A
e
Y=1/(1+exp(-X))
Y=1/(1+exp(-A))
plot(A,Y)
?rbern
rnorm
rnormal
?rnorm
?hist
N = 10000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-10,1)+R*rnorm(N,10,1)
hist(Y)
getwd()
library(ggplot2)
library(ggplot2)
df = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
23.2, 27.4, 49.4,
23.2, 30.9, 45.9)
)
df
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip()
library(ggplot2)
df_root = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(41.6, 27.9, 30.5,
23.2, 27.4, 49.4,
23.2, 30.9, 45.9)
)
df_leaf = data.frame(
gene = rep(c('unbiased','S-biased','T-biased'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(44.8, 29.1, 26.2,
18.1, 31.4, 50.5,
24.8, 25.2, 50.0)
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip()
p_root
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7) + coord_flip() + blank_theme
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip() + scale_fill_manual(values=c("#999999", "#E69F00", "#56B4E9"))
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()+blank_theme
p_root
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.root.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3')
p_root
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
p_leaf <- ggplot(df_leaf, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.leaf.png",plot=p_leaf,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
p_leaf
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="./round4/Ntab.network.RData")
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readLines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
close(con)
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("80%.S.biased.txt")
Ntom.list = Glist("80%.T.biased.txt")
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
# get the number of nodes in each module
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readLines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
close(con)
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("80%.S-biased.txt")
Ntom.list = Glist("80%.T-biased.txt")
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
# GO term anaylsis for each module
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4/AHRD(80%)/GO.network.',color,'.csv',sep=""))
}
# GO term anaylsis for each module
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset, FALSE)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4/Interproscan(80%)/GO.network.',color,'.csv',sep=""))
}
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="./round3/Ntab.network.RData")
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readLines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
close(con)
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("80%.S-biased.txt")
Ntom.list = Glist("80%.T-biased.txt")
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
# GO term anaylsis for each module
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset, FALSE)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3/Interproscan(80%)/GO.network.',color,'.csv',sep=""))
}
# GO term anaylsis for each module
source("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO/goModule.R")
for (color in color.set){
gene.subset = colnames(NtabExpr[,bwModuleColors == color])
go.result = go(gene.subset)
write.csv(go.result, paste('C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round3/AHRD(80%)/GO.network.',color,'.csv',sep=""))
}
