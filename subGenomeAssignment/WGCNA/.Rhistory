"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment)
ddsHTSeq
colData=data.frame(time=factor(time),treatment=factor(treatment))
colData
model.matrix(~time+treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c(0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1)
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = factor(treatment))
colData=data.frame(time=time,treatment=factor(treatment))
model.matrix(~time+treatment+time:treatment,colData)
View(wt_aggregate)
View(clv1ab_cyto_treatment_aggregate)
A=seq(-10,10,0.01)
A
e
Y=1/(1+exp(-X))
Y=1/(1+exp(-A))
plot(A,Y)
?rbern
rnorm
rnormal
?rnorm
?hist
N = 10000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-10,1)+R*rnorm(N,10,1)
hist(Y)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
library(WGCNA)
lnames = load(file="./round4/Ntab.network.RData")
Glist = function(Infile){
glist = list()
con = file(Infile,'r')
while(TRUE){
line = readLines(con,n=1)
if(length(line)==0){
break
}
glist = c(glist, trimws(line))
}
close(con)
return (glist)
}
#first get a list of genes in each subgenome
Nsyl.list = Glist("gene.Nsyl.v1.ID")
Ntom.list = Glist("gene.Ntom.v1.ID")
color.set = unique(bwModuleColors)
colnames = c("total","S subgenome","T subgenome", "ambiguous")
data = matrix(NA,nrow=length(color.set),ncol=length(colnames))
# get the number of nodes in each module
for (color.index in 0:(length(color.set)-1)){
count = sum(bwnet$colors == color.index)
gene.subset = colnames(NtabExpr[,bwnet$colors==color.index])
Nsyl.count = sum(Nsyl.list %in% gene.subset)
Ntom.count = sum(Ntom.list %in% gene.subset)
other.count = count - Nsyl.count - Ntom.count
data[color.index+1,] = c(count,Nsyl.count,Ntom.count,other.count)
}
df = as.data.frame(data, row.names=1:length(color.set))
colnames(df) = c("total","S subgenome","T subgenome","ambiguous")
write.csv(df,"WGCNA_summaryBySubgenome.csv")
# first load a file specifying homeologous gene pairs and store them in a dictionary
library(hash)
con = file('non.sig.txt','r')
h = hash()
while(TRUE){
line = readLines(con,n = 1)
if(length(line) == 0){
break
}
pair = strsplit(trimws(line),"\t")[[1]]
#print(pair)
h[[pair[[1]]]] = pair[[2]]
}
close(con)
# query WGCNA object to see whether two genes in a pair belong to the same module
total.pair = 0
sameModule = 0
similarModule = 0
divergentModule = 0
eigenGene.matrix = t(as.matrix(bwMEs))
maxDist = max(dist(eigenGene.matrix, method="euclidean"))
d = vector()
for (Nsyl.g in keys(h)){
Ntom.g = h[[Nsyl.g]]
Nsyl.label = bwModuleLabels[Nsyl.g]
Ntom.label = bwModuleLabels[Ntom.g]
if (is.na(Nsyl.label) | is.na(Ntom.label)){
next
}
total.pair = total.pair + 1
Nsyl.ME = bwMEs[,paste('ME',Nsyl.label,sep="")]
Ntom.ME = bwMEs[,paste('ME',Ntom.label,sep="")]
dist = sqrt(sum((Nsyl.ME - Ntom.ME)^2))
d = c(d,dist)
if (dist != 0){
# check how divergent these two modules are
if (dist <= 0.5*maxDist){
similarModule = similarModule + 1
}else{
divergentModule = divergentModule + 1
}
}
else{
if (Nsyl.label == 0){
divergentModule = divergentModule + 1
}
else{
sameModule = sameModule + 1
}
}
}
library(ggplot2)
# first draw a histogram of dist between all homoelogs
qplot(d, geom="histogram")
# plot pie chart and save it to disk
df = data.frame(
category=c(sprintf("same module(%s)", sameModule),
sprintf("similar module(%s)", similarModule),
sprintf("divergent module(%s)", divergentModule)),
num = c(sameModule, similarModule, divergentModule)
)
bp<- ggplot(df, aes(x="", y=num, fill=category))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie + scale_fill_grey() +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = percent(num/total.pair)),size=5,
position = position_stack(vjust = 0.5)) + ggtitle("unbiased homoelogs module-assignment in co-expression network")
ggsave("unbiased homoelogs module-assignment.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
# first load a file specifying homeologous gene pairs and store them in a dictionary
library(hash)
con = file('consensus.Nsyl.txt','r')
h = hash()
while(TRUE){
line = readLines(con,n = 1)
if(length(line) == 0){
break
}
pair = strsplit(trimws(line),"\t")[[1]]
#print(pair)
h[[pair[[1]]]] = pair[[2]]
}
close(con)
# query WGCNA object to see whether two genes in a pair belong to the same module
total.pair = 0
sameModule = 0
similarModule = 0
divergentModule = 0
eigenGene.matrix = t(as.matrix(bwMEs))
maxDist = max(dist(eigenGene.matrix, method="euclidean"))
d = vector()
for (Nsyl.g in keys(h)){
Ntom.g = h[[Nsyl.g]]
Nsyl.label = bwModuleLabels[Nsyl.g]
Ntom.label = bwModuleLabels[Ntom.g]
if (is.na(Nsyl.label) | is.na(Ntom.label)){
next
}
total.pair = total.pair + 1
Nsyl.ME = bwMEs[,paste('ME',Nsyl.label,sep="")]
Ntom.ME = bwMEs[,paste('ME',Ntom.label,sep="")]
dist = sqrt(sum((Nsyl.ME - Ntom.ME)^2))
d = c(d,dist)
if (dist != 0){
# check how divergent these two modules are
if (dist <= 0.5*maxDist){
similarModule = similarModule + 1
}else{
divergentModule = divergentModule + 1
}
}
else{
if (Nsyl.label == 0){
divergentModule = divergentModule + 1
}
else{
sameModule = sameModule + 1
}
}
}
library(ggplot2)
# first draw a histogram of dist between all homoelogs
qplot(d, geom="histogram")
# plot pie chart and save it to disk
df = data.frame(
category=c(sprintf("same module(%s)", sameModule),
sprintf("similar module(%s)", similarModule),
sprintf("divergent module(%s)", divergentModule)),
num = c(sameModule, similarModule, divergentModule)
)
bp<- ggplot(df, aes(x="", y=num, fill=category))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie + scale_fill_grey() +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = percent(num/total.pair)),size=5,
position = position_stack(vjust = 0.5)) + ggtitle("S-biased homoelogs module-assignment in co-expression network")
ggsave("S-biased homoelogs module-assignment.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
# first load a file specifying homeologous gene pairs and store them in a dictionary
library(hash)
con = file('consensus.Ntom.txt','r')
h = hash()
while(TRUE){
line = readLines(con,n = 1)
if(length(line) == 0){
break
}
pair = strsplit(trimws(line),"\t")[[1]]
#print(pair)
h[[pair[[1]]]] = pair[[2]]
}
close(con)
# query WGCNA object to see whether two genes in a pair belong to the same module
total.pair = 0
sameModule = 0
similarModule = 0
divergentModule = 0
eigenGene.matrix = t(as.matrix(bwMEs))
maxDist = max(dist(eigenGene.matrix, method="euclidean"))
d = vector()
for (Nsyl.g in keys(h)){
Ntom.g = h[[Nsyl.g]]
Nsyl.label = bwModuleLabels[Nsyl.g]
Ntom.label = bwModuleLabels[Ntom.g]
if (is.na(Nsyl.label) | is.na(Ntom.label)){
next
}
total.pair = total.pair + 1
Nsyl.ME = bwMEs[,paste('ME',Nsyl.label,sep="")]
Ntom.ME = bwMEs[,paste('ME',Ntom.label,sep="")]
dist = sqrt(sum((Nsyl.ME - Ntom.ME)^2))
d = c(d,dist)
if (dist != 0){
# check how divergent these two modules are
if (dist <= 0.5*maxDist){
similarModule = similarModule + 1
}else{
divergentModule = divergentModule + 1
}
}
else{
if (Nsyl.label == 0){
divergentModule = divergentModule + 1
}
else{
sameModule = sameModule + 1
}
}
}
library(ggplot2)
# first draw a histogram of dist between all homoelogs
qplot(d, geom="histogram")
# plot pie chart and save it to disk
df = data.frame(
category=c(sprintf("same module(%s)", sameModule),
sprintf("similar module(%s)", similarModule),
sprintf("divergent module(%s)", divergentModule)),
num = c(sameModule, similarModule, divergentModule)
)
bp<- ggplot(df, aes(x="", y=num, fill=category))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie + scale_fill_grey() +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = percent(num/total.pair)),size=5,
position = position_stack(vjust = 0.5)) + ggtitle("S-biased homoelogs module-assignment in co-expression network")
ggsave("S-biased homoelogs module-assignment.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
# first load a file specifying homeologous gene pairs and store them in a dictionary
library(hash)
con = file('consensus.Ntom.txt','r')
h = hash()
while(TRUE){
line = readLines(con,n = 1)
if(length(line) == 0){
break
}
pair = strsplit(trimws(line),"\t")[[1]]
#print(pair)
h[[pair[[1]]]] = pair[[2]]
}
close(con)
# query WGCNA object to see whether two genes in a pair belong to the same module
total.pair = 0
sameModule = 0
similarModule = 0
divergentModule = 0
eigenGene.matrix = t(as.matrix(bwMEs))
maxDist = max(dist(eigenGene.matrix, method="euclidean"))
d = vector()
for (Nsyl.g in keys(h)){
Ntom.g = h[[Nsyl.g]]
Nsyl.label = bwModuleLabels[Nsyl.g]
Ntom.label = bwModuleLabels[Ntom.g]
if (is.na(Nsyl.label) | is.na(Ntom.label)){
next
}
total.pair = total.pair + 1
Nsyl.ME = bwMEs[,paste('ME',Nsyl.label,sep="")]
Ntom.ME = bwMEs[,paste('ME',Ntom.label,sep="")]
dist = sqrt(sum((Nsyl.ME - Ntom.ME)^2))
d = c(d,dist)
if (dist != 0){
# check how divergent these two modules are
if (dist <= 0.5*maxDist){
similarModule = similarModule + 1
}else{
divergentModule = divergentModule + 1
}
}
else{
if (Nsyl.label == 0){
divergentModule = divergentModule + 1
}
else{
sameModule = sameModule + 1
}
}
}
library(ggplot2)
# first draw a histogram of dist between all homoelogs
qplot(d, geom="histogram")
# plot pie chart and save it to disk
df = data.frame(
category=c(sprintf("same module(%s)", sameModule),
sprintf("similar module(%s)", similarModule),
sprintf("divergent module(%s)", divergentModule)),
num = c(sameModule, similarModule, divergentModule)
)
bp<- ggplot(df, aes(x="", y=num, fill=category))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie + scale_fill_grey() +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = percent(num/total.pair)),size=5,
position = position_stack(vjust = 0.5)) + ggtitle("T-biased homoelogs module-assignment in co-expression network")
ggsave("T-biased homoelogs module-assignment.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
# first load a file specifying homeologous gene pairs and store them in a dictionary
library(hash)
con = file('consensus.Nsyl.txt','r')
h = hash()
while(TRUE){
line = readLines(con,n = 1)
if(length(line) == 0){
break
}
pair = strsplit(trimws(line),"\t")[[1]]
#print(pair)
h[[pair[[1]]]] = pair[[2]]
}
close(con)
# query WGCNA object to see whether two genes in a pair belong to the same module
total.pair = 0
sameModule = 0
similarModule = 0
divergentModule = 0
eigenGene.matrix = t(as.matrix(bwMEs))
maxDist = max(dist(eigenGene.matrix, method="euclidean"))
d = vector()
for (Nsyl.g in keys(h)){
Ntom.g = h[[Nsyl.g]]
Nsyl.label = bwModuleLabels[Nsyl.g]
Ntom.label = bwModuleLabels[Ntom.g]
if (is.na(Nsyl.label) | is.na(Ntom.label)){
next
}
total.pair = total.pair + 1
Nsyl.ME = bwMEs[,paste('ME',Nsyl.label,sep="")]
Ntom.ME = bwMEs[,paste('ME',Ntom.label,sep="")]
dist = sqrt(sum((Nsyl.ME - Ntom.ME)^2))
d = c(d,dist)
if (dist != 0){
# check how divergent these two modules are
if (dist <= 0.5*maxDist){
similarModule = similarModule + 1
}else{
divergentModule = divergentModule + 1
}
}
else{
if (Nsyl.label == 0){
divergentModule = divergentModule + 1
}
else{
sameModule = sameModule + 1
}
}
}
library(ggplot2)
# first draw a histogram of dist between all homoelogs
qplot(d, geom="histogram")
# plot pie chart and save it to disk
df = data.frame(
category=c(sprintf("same module(%s)", sameModule),
sprintf("similar module(%s)", similarModule),
sprintf("divergent module(%s)", divergentModule)),
num = c(sameModule, similarModule, divergentModule)
)
bp<- ggplot(df, aes(x="", y=num, fill=category))+
geom_bar(width = 1, stat = "identity")
pie <- bp + coord_polar("y", start=0)
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
# Apply blank theme
library(scales)
pie + scale_fill_grey() +  blank_theme +
theme(axis.text.x=element_blank()) +
geom_text(aes(label = percent(num/total.pair)),size=5,
position = position_stack(vjust = 0.5)) + ggtitle("S-biased homoelogs module-assignment in co-expression network")
ggsave("S-biased homoelogs module-assignment.png",
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
