nsim = 5000
n = 100
p = 0.07
mu = (1-p)/p
sig = sqrt((1-p)/p^2)
res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
nsim = 5000
n = 100
p = 0.07
mu = (1-p)/p
sig = sqrt((1-p)/p^2)
res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
qqnorm(res)
nsim = 500
n = 100
p = 0.07
mu = (1-p)/p
sig = sqrt((1-p)/p^2)
res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
qqnorm(res)
nsim = 5
n = 100
p = 0.07
mu = (1-p)/p
sig = sqrt((1-p)/p^2)
res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
qqnorm(res)
nsim = 500
n = 100
p = 0.07
mu = (1-p)/p
sig = sqrt((1-p)/p^2)
res = rep(0, nsim)
for(i in 1:nsim){
Z = rnbinom(n,1,p)
res[i] = sqrt(n)/sig*(mean(Z) - mu)
}
hist(res,100,freq=FALSE)
x = seq(-3,3,0.01)
lines(x,dnorm(x))
qqnorm(res)
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 500
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 500
n = 300
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
# the following code block estimates the variance of a negative binomial distribution
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = ((Z-mu)^2)
}
mean(var)
warnings()
# Many simulations aim to estimate an average
# the following code block estimates the variance of a negative binomial distribution
nsim = 5000
n = 3
p = 0.07
mu = (1-p)/p
var = rep(0, nsim)
for(i in 1:500){
Z = rnbinom(n,1,p)
var[i] = mean((Z-mu)^2)
}
mean(var)
q()
# Installing bioconductor
source("http://bioconductor.org/biocLite.R")
biocLite()
#Installing ggplot2
install.packages("ggplot2" , "reshape2")
library(ggplot2)
A=matrix(c(0,0,0,-1,0,0,0,-1,-1,1,0,-1,-1,1,0,-1),4,4,byrow=TRUE)
A
A%*%A
A%*%A%*%A
A%*%A%*%A%*%A
TRUE
sprintf('I love %s','hza')
?read.table
?optim
nbinom?
q
?nbinom
dnegbinom
?dnegbinom
?dnbinom
?optim
?dnbinom
?optim
?optim
?sample
library(topGO)
> if (!requireNamespace("BiocManager", quietly=TRUE)) + install.packages("BiocManager") > BiocManager::install("topGO")
requireNameSpace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager",quietly=TRUE)
requireNamespace("BiocManager")
BiocManager::install("topGO")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
library(ALL)
install.packages(ALL)
BiocManager::install("ALL")
# topGO practice
library(topGO)
library(ALL)
data(ALL)
data(geneList)
?paste
geneList
annotation(ALL)
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
BiocManager::install("hgu95av2.db")
affyLib <- paste(annotation(ALL), "db", sep = ".")
library(package = affyLib, character.only = TRUE)
sampleGOdata = new("topGOdata", description = "Simple session", ontology = "BP",
allGenes = geneList, geneSel = topDiffGenes, nodeSize = 10,
annot = annFUN.db, affyLib = affyLib)
sampleGOdata
resultFisher = runTest(sampleGOdata, algorithm='classic', statistic='fisher')
resultFisher
resultKS = runTest(sampleGOdata, algorihtm='classic', statistic='ks')
resultKS.elim = runTest(sampleGOdata, algorithm='elim', statistic='ks')
library(genefilter)
BiocManager::install("genefilter")
ALL
geneID2GO <- readMappings(file = system.file("examples/geneid2go.map", package = "topGO"))
head(geneID2GO)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
sampleTable
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
library("DESeq2")
install.packages("Rcpp")
## DE analysis using DESeq2
## input data format: htseq-count output
go = function(gList){
### GO enrichment analysis
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/GO")
library(topGO)
geneID2GO <- readMappings(file = "Ntab.gene2go.newAnnot")
# the gene universe is given by the following line
# A total of 34056 genes get one or more GO terms assigned to it
geneNames = names(geneID2GO)
gene.of.interest = gList
gene.of.interest = as.integer(geneNames %in% gene.of.interest)
gene.of.interest = factor(gene.of.interest)
names(gene.of.interest) = geneNames # make it intno a named vector
GOdata = new("topGOdata", ontology="BP", allGenes=gene.of.interest,
annot=annFUN.gene2GO, gene2GO=geneID2GO)
test.stat = new("classicCount", testStatistic = GOFisherTest, name = "Fisher test")
resultFisher = getSigGroups(GOdata, test.stat)
pvals = score(resultFisher)
allRes = GenTable(GOdata, classic = resultFisher,
orderBy = "classic", ranksOf = "classic", topNodes = 20)
return (allRes)
}
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
condition = c("Control_T0","Control_T0","Control_T0",
"Control_T2","Control_T2","Control_T2",
"meJA_T2","meJA_T2","meJA_T2",
"Control_T6","Control_T6","Control_T6",
"meJA_T6","meJA_T6",
"Control_T24","Control_T24","Control_T24",
"meJA_T24","meJA_T24","meJA_T24")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
condition = condition)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ condition)
install.packages("RSQLite")
library("DESeq2")
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment + time:treatment)
sampleTable
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c("untreated","untreated","untreated",
"untreated","untreated","untreated",
"treated","treated","treated",
"untreated","untreated","untreated",
"treated","treated",
"untreated","untreated","untreated",
"treated","treated","treated")
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = treatment)
library("DESeq2")
ddsHTSeq <- DESeqDataSetFromHTSeqCount(sampleTable = sampleTable,
directory = dir.htseq,
design= ~ time + treatment)
ddsHTSeq
colData=data.frame(time=factor(time),treatment=factor(treatment))
colData
model.matrix(~time+treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
model.matrix(~time+treatment+time:treatment,colData)
fdr = 0.1
dir.htseq = "C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/DEseq2/htseq"
files.htseq = grep("htseq",list.files(dir.htseq),value=TRUE)
time = c("T0","T0","T0","T2","T2","T2","T2","T2","T2",
"T6","T6","T6","T6","T6","T24","T24","T24","T24","T24","T24")
treatment = c(0,0,0,0,0,0,1,1,1,0,0,0,1,1,0,0,0,1,1,1)
sampleTable <- data.frame(sampleName = files.htseq,
fileName = files.htseq,
time = time, treatment = factor(treatment))
colData=data.frame(time=time,treatment=factor(treatment))
model.matrix(~time+treatment+time:treatment,colData)
View(wt_aggregate)
View(clv1ab_cyto_treatment_aggregate)
A=seq(-10,10,0.01)
A
e
Y=1/(1+exp(-X))
Y=1/(1+exp(-A))
plot(A,Y)
?rbern
rnorm
rnormal
?rnorm
?hist
N = 10000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-1,1)+R*rnorm(N,1,1)
hist(Y)
N = 100000000
R = rbinom(N,1,0.5)
Y = R*rnorm(N,-10,1)+R*rnorm(N,10,1)
hist(Y)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA")
options(stringsAsFactors=FALSE)
rawCounts = read.csv("rawCounts.csv", header=TRUE)
rawMatrix = as.matrix(rawCounts[,-1])
rownames(rawMatrix) = rawCounts$X
library(DESeq2)
transformedCounts = rlog(rawMatrix, blind=TRUE, fitType="parametric")
rownames(transformedCounts) = rawCounts$X
write.csv(transformedCounts, "rlog.count.csv")
library(WGCNA)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round2")
options(stringsAsFactors=FALSE)
NtabData = read.csv("rlog.count.csv")
# each row is the gene expression data (rlog transformed) of all genes in each condition
NtabExpr = as.data.frame(t(NtabData[,-1]))
names(NtabExpr) = NtabData$X
rownames(NtabExpr) = colnames(NtabData[,-1])
# first cluster samples to see whether there are any outliers
sampleTree = hclust(dist(NtabExpr), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
library(WGCNA)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round2")
options(stringsAsFactors=FALSE)
NtabData = read.csv("rlog.count.csv")
# each row is the gene expression data (rlog transformed) of all genes in each condition
NtabExpr = as.data.frame(t(NtabData[,-1]))
names(NtabExpr) = NtabData$X
rownames(NtabExpr) = colnames(NtabData[,-1])
# first cluster samples to see whether there are any outliers
sampleTree = hclust(dist(NtabExpr), method = "average");
# Plot the sample tree: Open a graphic output window of size 12 by 9 inches
# The user should change the dimensions if the window is too large or too small.
sizeGrWindow(12,9)
#pdf(file = "Plots/sampleClustering.pdf", width = 12, height = 9);
par(cex = 0.6);
par(mar = c(0,4,2,0))
plot(sampleTree, main = "Sample clustering to detect outliers", sub="", xlab="", cex.lab = 1.5,
cex.axis = 1.5, cex.main = 2)
#it appears that there is no obvious outliers. So nothing is done.
# choose appropriate soft-thresholding powers
# Choose a set of soft-thresholding powers
powers = 1:20
# Call the network topology analysis function
sft = pickSoftThreshold(NtabExpr, powerVector = powers, verbose = 5)
# Plot the results:
sizeGrWindow(9, 5)
pdf(file = "Plots/soft-thresholding.pdf", width = 9, height = 5);
par(mfrow = c(1,2));
cex1 = 0.9;
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# from the plot, it appears that 12 is a good candidate for soft-thresholding power
?blockwiseModules
abline(h=0.80,col="blue")
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
abline(h=0.80,col="blue")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# from the plot, it appears that 12 is a good candidate for soft-thresholding power
# Scale-free topology fit index as a function of the soft-thresholding power
plot(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
xlab="Soft Threshold (power)",ylab="Scale Free Topology Model Fit,signed R^2",type="n",
main = paste("Scale independence"));
text(sft$fitIndices[,1], -sign(sft$fitIndices[,3])*sft$fitIndices[,2],
labels=powers,cex=cex1,col="red");
# this line corresponds to using an R^2 cut-off of h
abline(h=0.90,col="red")
abline(h=0.85,col="black")
abline(h=0.80,col="blue")
# Mean connectivity as a function of the soft-thresholding power
plot(sft$fitIndices[,1], sft$fitIndices[,5],
xlab="Soft Threshold (power)",ylab="Mean Connectivity", type="n",
main = paste("Mean connectivity"))
text(sft$fitIndices[,1], sft$fitIndices[,5], labels=powers, cex=cex1,col="red")
# from the plot, it appears that 12 is a good candidate for soft-thresholding power
