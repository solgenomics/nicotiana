path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA/round4')
p_leaf
pnbinom(250,50,32/63,lower.tail=F)
pnbinom(300,50,32/63,lower.tail=F)
?pnorm
pnorm(5, mean=5,sd=1)
pnorm(5)
pnorm(300,mean=98.4375,sd=sqrt(82.764),lower.tail=F)
library(ggplot2)
df_root_08 = data.frame(
gene = rep(c('unbiased(4367)','S-biased(967)','T-biased(1115)'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(34.46, 37.07, 28.46,
20.0, 33.4, 46.6,
23.1, 33.5, 43.4)
)
df_root_08$module = factor(df_root_08$module,
levels=c("divergent module","similar module","same module"))
df_leaf_08 = data.frame(
gene = rep(c('unbiased(4225)','S-biased(866)','T-biased(987)'),each=3),
module = rep(c('same module','similar module','divergent module'),3),
percentage = c(37.4, 38.0, 24.7,
18.7, 32.9, 48.4,
18.7, 34.8, 46.5)
)
df_leaf_08$module = factor(df_leaf_08$module,
levels=c("divergent module","similar module","same module"))
blank_theme <- theme_minimal()+
theme(
axis.title.x = element_blank(),
axis.title.y = element_blank(),
panel.border = element_blank(),
panel.grid=element_blank(),
axis.ticks = element_blank(),
plot.title=element_text(size=14, face="bold")
)
p_root <- ggplot(df_root, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_leaf <- ggplot(df_leaf, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_leaf_08 <- ggplot(df_leaf_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
p_root_08 <- ggplot(df_root_08, aes(x = gene, y = percentage))+
geom_col(aes(fill = module), width = 0.7)+
coord_flip()+
scale_fill_grey()
ggsave("homeologous gene in co-expression network.leaf.80%%.png",plot=p_leaf_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA')
ggsave("homeologous gene in co-expression network.root.80%%.png",plot=p_root_08,
path='C:/Users/10453/source/repos/SGN/nicotiana/subGenomeAssignment/WGCNA')
?acf
?mean
a=c(1:3)
a
a[1]
a[[1]]
a-1
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
a/a[2]
my_acf = function(X, maxLag){
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h] = sum((temp1-mu)*(temp2-mu))/N
}
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
?sum
my_acf = function(X, maxLag){
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
mu = mean(X)
N = length(X)
print(mu)
print(N)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
x
?mean
length(x)
?length(x)
?length
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
print(mu)
print(N)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
print(mu)
print(N)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
print(mu)
print(N)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
?abline
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
abline(h=1/sqrt(N), color='blue', lty=2)
abline(h=-1/sqrt(N), color='blue', lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
abline(h=1/sqrt(N), col='blue', lty=2)
abline(h=-1/sqrt(N), col='blue', lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF')
abline(h=1/sqrt(N), col='blue', lty=2)
abline(h=-1/sqrt(N), col='blue', lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF', type='h')
abline(h=2/sqrt(N), col='blue', lty=2)
abline(h=-2/sqrt(N), col='blue', lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF', type='h')
abline(h=2/sqrt(N), col='blue', lty=2)
abline(h=-2/sqrt(N), col='blue', lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf = function(X, maxLag){
X = X[!is.na(X)]
mu = mean(X)
N = length(X)
gamma_h = rep(0, maxLag+1)
for (h in 0:maxLag){
temp1 = X[1:(length(X)-h)]
temp2 = X[(1+h):length(X)]
gamma_h[h+1] = sum((temp1-mu)*(temp2-mu))/N
}
print(gamma_h)
plot(c(0:maxLag), gamma_h/gamma_h[1], main='Sample ACF', xlab='Lag', ylab='ACF', type='h')
abline(h=2/sqrt(N), col='blue', lty=2)
abline(h=-2/sqrt(N), col='blue', lty=2)
abline(h=0, lty=2)
}
#simulate filtered Gaussian White Noise
T <- 100
w <- rnorm(T)
x <- filter(w, sides=2, filter=rep(1/3,3))
lagmax = 10
acf(x, na.action=na.omit, lag.max=lagmax, main='Sample ACF')
my_acf(x, lagmax)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/Methylation/shoot")
library(cowplot)
p1 <- readRDS("K326_shoot_MethOverRegion_CG.pdf.rds")
p2 <- readRDS("K326_shoot_MethOverRegion_CHG.pdf.rds")
p3 <- readRDS("K326_shoot_MethOverRegion_CHH.pdf.rds")
p4 <- readRDS("K326_unbiased_MethOverRegion_CG.pdf.rds")
p5 <- readRDS("K326_unbiased_MethOverRegion_CHG.pdf.rds")
p6 <- readRDS("K326_unbiased_MethOverRegion_CHH.pdf.rds")
p7 <- readRDS("K326_S-biased_MethOverRegion_CG.pdf.rds")
p8 <- readRDS("K326_S-biased_MethOverRegion_CHG.pdf.rds")
p9 <- readRDS("K326_S-biased_MethOverRegion_CHH.pdf.rds")
p10 <- readRDS("K326_T-biased_MethOverRegion_CG.pdf.rds")
p11 <- readRDS("K326_T-biased_MethOverRegion_CHG.pdf.rds")
p12 <- readRDS("K326_T-biased_MethOverRegion_CHH.pdf.rds")
plot <- plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,
labels=c('CpG','CHG','CHH'), label_size=8, label_x = 0, label_y = 0,
ncol = 3)
save_plot("k326.shoot.meth.pdf", plot,
ncol = 3,
base_aspect_ratio = 2
)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/Methylation/shoot")
library(cowplot)
p1 <- readRDS("K326_shoot_MethOverRegion_CG.pdf.rds")
p2 <- readRDS("K326_shoot_MethOverRegion_CHG.pdf.rds")
p3 <- readRDS("K326_shoot_MethOverRegion_CHH.pdf.rds")
p4 <- readRDS("K326_unbiased_MethOverRegion_CG.pdf.rds")
p5 <- readRDS("K326_unbiased_MethOverRegion_CHG.pdf.rds")
p6 <- readRDS("K326_unbiased_MethOverRegion_CHH.pdf.rds")
p7 <- readRDS("K326_S-biased_MethOverRegion_CG.pdf.rds")
p8 <- readRDS("K326_S-biased_MethOverRegion_CHG.pdf.rds")
p9 <- readRDS("K326_S-biased_MethOverRegion_CHH.pdf.rds")
p10 <- readRDS("K326_T-biased_MethOverRegion_CG.pdf.rds")
p11 <- readRDS("K326_T-biased_MethOverRegion_CHG.pdf.rds")
p12 <- readRDS("K326_T-biased_MethOverRegion_CHH.pdf.rds")
plot <- plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,
labels=c('CpG','CHG','CHH'), label_size=8, label_x = 0, label_y = 0,
ncol = 3)
save_plot("k326.shoot.meth.pdf", plot,
ncol = 3,
base_aspect_ratio = 2
)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/Methylation/shoot")
library(cowplot)
p1 <- readRDS("K326_shoot_MethOverRegion_CG.pdf.rds")
p2 <- readRDS("K326_shoot_MethOverRegion_CHG.pdf.rds")
p3 <- readRDS("K326_shoot_MethOverRegion_CHH.pdf.rds")
p4 <- readRDS("K326_unbiased_MethOverRegion_CG.pdf.rds")
p5 <- readRDS("K326_unbiased_MethOverRegion_CHG.pdf.rds")
p6 <- readRDS("K326_unbiased_MethOverRegion_CHH.pdf.rds")
p7 <- readRDS("K326_S-biased_MethOverRegion_CG.pdf.rds")
p8 <- readRDS("K326_S-biased_MethOverRegion_CHG.pdf.rds")
p9 <- readRDS("K326_S-biased_MethOverRegion_CHH.pdf.rds")
p10 <- readRDS("K326_T-biased_MethOverRegion_CG.pdf.rds")
p11 <- readRDS("K326_T-biased_MethOverRegion_CHG.pdf.rds")
p12 <- readRDS("K326_T-biased_MethOverRegion_CHH.pdf.rds")
plot <- plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,
labels=c('CpG','CHG','CHH'), label_size=8, label_x = 0, label_y = 0,
ncol = 3)
save_plot("k326.shoot.meth.pdf", plot,
ncol = 3,
base_aspect_ratio = 2
)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/Methylation/shoot")
library(cowplot)
p1 <- readRDS("K326_shoot_MethOverRegion_CG.pdf.rds")
p2 <- readRDS("K326_shoot_MethOverRegion_CHG.pdf.rds")
p3 <- readRDS("K326_shoot_MethOverRegion_CHH.pdf.rds")
p4 <- readRDS("K326_unbiased_MethOverRegion_CG.pdf.rds")
p5 <- readRDS("K326_unbiased_MethOverRegion_CHG.pdf.rds")
p6 <- readRDS("K326_unbiased_MethOverRegion_CHH.pdf.rds")
p7 <- readRDS("K326_S-biased_MethOverRegion_CG.pdf.rds")
p8 <- readRDS("K326_S-biased_MethOverRegion_CHG.pdf.rds")
p9 <- readRDS("K326_S-biased_MethOverRegion_CHH.pdf.rds")
p10 <- readRDS("K326_T-biased_MethOverRegion_CG.pdf.rds")
p11 <- readRDS("K326_T-biased_MethOverRegion_CHG.pdf.rds")
p12 <- readRDS("K326_T-biased_MethOverRegion_CHH.pdf.rds")
plot <- plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,
labels=c('CpG','CHG','CHH'), label_size=8, label_x = 0, label_y = 0,
ncol = 3)
save_plot("k326.shoot.meth.pdf", plot,
ncol = 3,
base_aspect_ratio = 1
)
setwd("C:/Users/10453/source/repos/SGN/nicotiana/Methylation/shoot")
library(cowplot)
p1 <- readRDS("K326_shoot_MethOverRegion_CG.pdf.rds")
p2 <- readRDS("K326_shoot_MethOverRegion_CHG.pdf.rds")
p3 <- readRDS("K326_shoot_MethOverRegion_CHH.pdf.rds")
p4 <- readRDS("K326_unbiased_MethOverRegion_CG.pdf.rds")
p5 <- readRDS("K326_unbiased_MethOverRegion_CHG.pdf.rds")
p6 <- readRDS("K326_unbiased_MethOverRegion_CHH.pdf.rds")
p7 <- readRDS("K326_S-biased_MethOverRegion_CG.pdf.rds")
p8 <- readRDS("K326_S-biased_MethOverRegion_CHG.pdf.rds")
p9 <- readRDS("K326_S-biased_MethOverRegion_CHH.pdf.rds")
p10 <- readRDS("K326_T-biased_MethOverRegion_CG.pdf.rds")
p11 <- readRDS("K326_T-biased_MethOverRegion_CHG.pdf.rds")
p12 <- readRDS("K326_T-biased_MethOverRegion_CHH.pdf.rds")
plot <- plot_grid(p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,
labels=c('CpG','CHG','CHH'), label_size=8, label_x = 0, label_y = 0,
ncol = 3)
save_plot("k326.shoot.meth.pdf", plot,
ncol = 3,
base_aspect_ratio = 0.5
)
